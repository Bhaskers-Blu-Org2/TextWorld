#!/usr/bin/env python

# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT license.

import os
import sys
import pprint
import argparse
from collections import defaultdict

from textworld.text_utils import extract_vocab
from textworld.generator import Game


def parse_args():
    DESCRIPTION = "Extract information from of a list of TextWorld games."
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    general_group = parser.add_argument_group('General settings')
    general_group.add_argument("-v", "--verbose", action="store_true")
    general_group.add_argument("-f", "--force", action="store_true")

    parser.add_argument("games", metavar="game", nargs="+",
                        help="List of TextWorld games (.ulx|.json).")
    parser.add_argument("--infos", nargs="+", required=True,
                        help='Type of information to extract: locations, objects, directions, and vocab.')
    parser.add_argument("--output", default="infos.txt",
                        help="Output file containing all extracted information (.txt). Default: %(default)s")

    return parser.parse_args(), parser


def main():
    args, parser = parse_args()

    units = {"objects": ("object", "objects"),
             "vocab": ("word", "words"),
             "locations": ("room", "rooms"),
             "directions": ("direction", "directions")}
    infos = defaultdict(set)
    for info in args.infos:
        if info == "objects":
            for gamefile in args.games:
                game = Game.load(gamefile.replace(".ulx", ".json"))
                infos["objects"] |= set(game.object_names)

        elif info == "locations":
            for gamefile in args.games:
                game = Game.load(gamefile.replace(".ulx", ".json"))
                infos["locations"] |= set(game.location_names)

        elif info == "directions":
            for gamefile in args.games:
                game = Game.load(gamefile.replace(".ulx", ".json"))
                infos["directions"] |= set(game.directions)

        elif info == "vocab":
            games_iter = (Game.load(gamefile.replace(".ulx", ".json"))
                        for gamefile in args.games)
            infos["vocab"] = extract_vocab(games_iter)

    if args.verbose:
        for k in sorted(infos):
            print("{}:".format(k))
            print("-" * (len(k) + 1))
            pprint.pprint(sorted(infos[k]))
            print()

    for k in sorted(infos):
        length = len(infos[k])
        unit = units[k][1] if length > 1 else units[k][1]
        print("Extracted {} {}.".format(length, unit))

    if os.path.isfile(args.output) and not args.force:
        msg = "{} already exists. Use --force to overwrite."
        print(msg.format(args.output))
        sys.exit(1)

    with open(args.output, "w") as f:
        lines = []
        for k in sorted(infos):
            lines += sorted(infos[k])

        f.write("\n".join(lines))


if __name__ == "__main__":
    main()
